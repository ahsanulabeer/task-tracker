{"ast":null,"code":"import{React,useState,useEffect}from\"react\";import{BrowserRouter as Router,Route,Routes}from\"react-router-dom\";import\"./index.css\";import Tasks from\"./components/Tasks\";import Header from\"./components/Header\";import AddTask from\"./components/AddTask\";import Footer from\"./components/Footer\";import About from\"./components/About\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";export default function App(){const[showAddTask,setShowAddTask]=useState(false);const[tasks,setTasks]=useState([]);useEffect(()=>{const getTasks=async()=>{const tasksFromServer=await fetchTasks();setTasks(tasksFromServer);};getTasks();},[]);// Fetch Tasks\nconst fetchTasks=async()=>{const res=await fetch(\"http://localhost:5000/tasks\");const data=await res.json();return data;};// Fetch Task (a single task)\nconst fetchTask=async id=>{const res=await fetch(\"http://localhost:5000/tasks/\".concat(id));const data=await res.json();return data;};// Add Task\nconst addTask=async task=>{const res=await fetch(\"http://localhost:5000/tasks\",{method:\"POST\",headers:{\"Content-type\":\"application/json\"},body:JSON.stringify(task)});const data=await res.json();setTasks([...tasks,data]);// const id = Math.floor(Math.random() * 10000) + 1;\n// const newTask = { id, ...task };\n// setTasks([...tasks, newTask]);\n};// Delete task\nconst deleteTask=async id=>{await fetch(\"http://localhost:5000/tasks/\".concat(id),{method:\"DELETE\"});setTasks(tasks.filter(task=>task.id!==id));};// Toggle Reminder\nconst toggleReminder=async id=>{const taskToToggle=await fetchTask(id);const updTask={...taskToToggle,reminder:!taskToToggle.reminder};const res=await fetch(\"http://localhost:5000/tasks/\".concat(id),{method:\"PUT\",headers:{\"Content-type\":\"application/json\"},body:JSON.stringify(updTask)});const data=await res.json();setTasks(tasks.map(task=>task.id===id?{...task,reminder:data.reminder}:task));};return/*#__PURE__*/_jsx(Router,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"container\",children:[/*#__PURE__*/_jsx(Header,{onAdd:()=>setShowAddTask(!showAddTask),showAdd:showAddTask}),/*#__PURE__*/_jsxs(Routes,{children:[/*#__PURE__*/_jsx(Route,{path:\"/\",element:/*#__PURE__*/_jsxs(_Fragment,{children:[showAddTask&&/*#__PURE__*/_jsx(AddTask,{onAdd:addTask}),tasks.length>0?/*#__PURE__*/_jsx(Tasks,{tasks:tasks,onDelete:deleteTask,onToggle:toggleReminder}):\"Add a Task!\"]})}),/*#__PURE__*/_jsx(Route,{path:\"/about\",element:/*#__PURE__*/_jsx(About,{})})]}),/*#__PURE__*/_jsx(Footer,{})]})});}","map":{"version":3,"sources":["C:/Users/abeer/Downloads/react-crash-course/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","Tasks","Header","AddTask","Footer","About","App","showAddTask","setShowAddTask","tasks","setTasks","getTasks","tasksFromServer","fetchTasks","res","fetch","data","json","fetchTask","id","addTask","task","method","headers","body","JSON","stringify","deleteTask","filter","toggleReminder","taskToToggle","updTask","reminder","map","length"],"mappings":"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","sourcesContent":["import { React, useState, useEffect } from \"react\";\nimport { BrowserRouter as Router, Route, Routes } from \"react-router-dom\";\nimport \"./index.css\";\nimport Tasks from \"./components/Tasks\";\nimport Header from \"./components/Header\";\nimport AddTask from \"./components/AddTask\";\nimport Footer from \"./components/Footer\";\nimport About from \"./components/About\";\n\nexport default function App() {\n  const [showAddTask, setShowAddTask] = useState(false);\n  const [tasks, setTasks] = useState([]);\n\n  useEffect(() => {\n    const getTasks = async () => {\n      const tasksFromServer = await fetchTasks();\n      setTasks(tasksFromServer);\n    };\n\n    getTasks();\n  }, []);\n\n  // Fetch Tasks\n  const fetchTasks = async () => {\n    const res = await fetch(\"http://localhost:5000/tasks\");\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Fetch Task (a single task)\n  const fetchTask = async (id) => {\n    const res = await fetch(`http://localhost:5000/tasks/${id}`);\n    const data = await res.json();\n\n    return data;\n  };\n\n  // Add Task\n  const addTask = async (task) => {\n    const res = await fetch(\"http://localhost:5000/tasks\", {\n      method: \"POST\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(task),\n    });\n\n    const data = await res.json();\n\n    setTasks([...tasks, data]);\n    // const id = Math.floor(Math.random() * 10000) + 1;\n\n    // const newTask = { id, ...task };\n    // setTasks([...tasks, newTask]);\n  };\n  // Delete task\n  const deleteTask = async (id) => {\n    await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"DELETE\",\n    });\n\n    setTasks(tasks.filter((task) => task.id !== id));\n  };\n\n  // Toggle Reminder\n  const toggleReminder = async (id) => {\n    const taskToToggle = await fetchTask(id);\n    const updTask = { ...taskToToggle, reminder: !taskToToggle.reminder };\n\n    const res = await fetch(`http://localhost:5000/tasks/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-type\": \"application/json\",\n      },\n      body: JSON.stringify(updTask),\n    });\n\n    const data = await res.json();\n\n    setTasks(\n      tasks.map((task) =>\n        task.id === id ? { ...task, reminder: data.reminder } : task\n      )\n    );\n  };\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <Header\n          onAdd={() => setShowAddTask(!showAddTask)}\n          showAdd={showAddTask}\n        />\n\n        <Routes>\n          <Route\n            path=\"/\"\n            element={\n              <>\n                {showAddTask && <AddTask onAdd={addTask} />}\n                {tasks.length > 0 ? (\n                  <Tasks\n                    tasks={tasks}\n                    onDelete={deleteTask}\n                    onToggle={toggleReminder}\n                  />\n                ) : (\n                  \"Add a Task!\"\n                )}\n              </>\n            }\n          />\n          <Route path=\"/about\" element={<About />} />\n        </Routes>\n        <Footer />\n      </div>\n    </Router>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}